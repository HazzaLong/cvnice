{
  "openapi": "3.1.0",
  "info": {
    "title": "BasicLingua API",
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "https://rcd.nscampfire.com",
      "description": "Reference server"
    }
  ],
  "paths": {
    "/text/translate/{target_lang}": {
      "post": {
        "summary": "Text Translate Wrapper",
        "description": "translate the given text into the target language.\n\n`Parameters`:\n1. user_input (str): The input sentence to be translated.\nExample: \"The phone number is 123-456-7890.\"\n\n2. target_lang (str): The target language for translation.\nExample: \"french\".\n\n`Returns`:\nstr: The translated text in the target language.",
        "operationId": "text_translate_wrapper_text_translate__target_lang__post",
        "parameters": [
          {
            "name": "target_lang",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Target Lang"
            }
          },
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "*redacted*",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "title": "User Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/patterns/{pattern_params}": {
      "post": {
        "summary": "Detect Patterns",
        "description": "Extracts patterns from the given input sentence.\n\n`Parameters`:\n1. user_input (str): The input sentence containing information to be extracted.\nExample: \"The phone number is 123-456-7890.\"\n\n2. patterns (str): Comma-separated patterns to be extracted.\nExample: \"email, name, phone number, address, date of birth\".\n\n`Returns`:\n    list: A list containing the extracted patterns. If no pattern is found, returns None.",
        "operationId": "detect_patterns_patterns__pattern_params__post",
        "parameters": [
          {
            "name": "pattern_params",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Pattern Params"
            }
          },
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "*redacted*",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "title": "User Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StrListResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/text/replace/{replacement_rules}": {
      "post": {
        "summary": "Text Replace Wrapper",
        "description": "Replace words in the original text according to the replacement rules provided.\n\nParameters:\n1. user_input (str): The input sentence to be modified.\n    Example: \"I love Lamborghini, but Bugatti is even better. Although, Mercedes is a class above all.\"\n\n2. replacement_rules (str): A detailed prompt specifying the replacement rules.\n    Example: \"all mentioned cars with mehran but mercerdes with toyota\"\n\nReturns:\nstr: The modified text with replacements.",
        "operationId": "text_replace_wrapper_text_replace__replacement_rules__post",
        "parameters": [
          {
            "name": "replacement_rules",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Replacement Rules"
            }
          },
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "*redacted*",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "title": "User Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/text/detect/ner/{ner_tags}": {
      "post": {
        "summary": "Detect Ner Wrapper",
        "description": "Perform Named Entity Recognition (NER) detection on the input text.\n\nParameters:\n1. user_input (str): The input sentence to be modified.\n    Example: \"I love Lamborghini, but Bugatti is even better. Although, Mercedes is a class above all.\"\n\n2. ner_tags (str, optional): A comma-separated string specifying the NER tags.\n    Example: \"organization, date, time\"\n    Default: \"person, location, organization, date, time, money, percent\"\n\nReturns:\nlist: A list of tuples containing the detected NER entities.",
        "operationId": "detect_ner_wrapper_text_detect_ner__ner_tags__post",
        "parameters": [
          {
            "name": "ner_tags",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ner Tags"
            }
          },
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "*redacted*",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "title": "User Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TupleListResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/text/summarize/{summary_length}": {
      "post": {
        "summary": "Text Summarize Wrapper",
        "description": "Generate a summary of the input text.\n\nParameters:\n1. user_input (str): The input sentence to be summarized.\n    Example: \"I love Lamborghini, but Bugatti is even better\"\n\n2. summary_length (str, optional): The length of the summary.\n    Values (str): \"short\", \"medium\" or \"long\"\n    Default: \"short\"\n\nReturns:\nstr: The generated summary.",
        "operationId": "text_summarize_wrapper_text_summarize__summary_length__post",
        "parameters": [
          {
            "name": "summary_length",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Summary Length"
            }
          },
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "*redacted*",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "title": "User Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/text/qna/{question}": {
      "post": {
        "summary": "Text Qna Wrapper",
        "description": "answer the given question based on the input text.\n\nParameters:\n1. user_input (str): The input sentence on which the question is based.\n    Example: \"OpenAI has hosted a hackathon for developers to build AI models. The event took place on 15th October 2022.\"\n\n2. question (str): question to be answered\n    Example: \"When did the event happen?\"\n\nReturns:\nstr: The generated summary.",
        "operationId": "text_qna_wrapper_text_qna__question__post",
        "parameters": [
          {
            "name": "question",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Question"
            }
          },
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "*redacted*",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "title": "User Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/text/intent": {
      "post": {
        "summary": "Text Intent Wrapper",
        "description": "Identify the intent of the user input.\n\nParameters:\n1. user_input (str): The input sentence of which the intent is to be identified.\n    Example: \"OpenAI has hosted a hackathon for developers to build AI models.\"\n\nReturns:\nstr: The identified intent.",
        "operationId": "text_intent_wrapper_text_intent_post",
        "parameters": [
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "*redacted*",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "title": "User Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StrListResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/text/lemstem/{operation}": {
      "post": {
        "summary": "Text Lemstem Wrapper",
        "operationId": "text_lemstem_wrapper_text_lemstem__operation__post",
        "parameters": [
          {
            "name": "operation",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LemStemOp"
            }
          },
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "*redacted*",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "title": "User Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/text/tokenize": {
      "post": {
        "summary": "Text Tokenize Wrapper",
        "operationId": "text_tokenize_wrapper_text_tokenize_post",
        "parameters": [
          {
            "name": "break_point",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": " ",
              "title": "Break Point"
            }
          },
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "*redacted*",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "title": "User Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StrListResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/text/embed/{task_type}": {
      "post": {
        "summary": "Text Embed Wrapper",
        "description": "Perform stemming or lemmatization on the input text.\n\nParameters:\n1. user_input (str): The input sentence to be processed.\n    Example: \"OpenAI has hosted a hackathon for developers to build AI models.\"\n\n2. type (str, optional): The type of text processing to be performed.\n    Values (str): \"stemming\" or \"lemmatization\"\n    Default: \"stemming\"\n\nReturns:\nstr: The processed sentence.",
        "operationId": "text_embed_wrapper_text_embed__task_type__post",
        "parameters": [
          {
            "name": "task_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EmbedTaskType"
            }
          },
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "*redacted*",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "title": "User Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OptionalListResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/text/generate/{length}": {
      "post": {
        "summary": "Text Generate Wrapper",
        "description": "Generate text based on the input text.\n\nParameters:\n1. user_input (str): The input sentence to generate text from.\n    Example: \"I love Lamborghini, but Bugatti is even better\"\n\n2. ans_length (str, optional): The length of the generated text.\n    Values (str): \"short\", \"medium\" or \"long\"\n    Default: \"short\"\n\nReturns:\nstr: The generated text.",
        "operationId": "text_generate_wrapper_text_generate__length__post",
        "parameters": [
          {
            "name": "length",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Length"
            }
          },
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "*redacted*",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "title": "User Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/text/detect_spam": {
      "post": {
        "summary": "Detect Spam Wrapper",
        "description": "Perform spam detection on the input text.\n\nParameters:\n1. user_input (str): The input sentence to perform spam detection on.\n    Example: \"Congratulations! You have won a lottery of $1,000,000!\"\n\n2. num_classes (str, optional): The number of classes for spam detection.\n    Default: \"spam, not_spam, unknown\"\n\n3. explanation (bool, optional): Whether to include an explanation in the result.\n    Default: True\n\nReturns:\ndict: A dictionary containing the prediction and explanation (if available).",
        "operationId": "detect_spam_wrapper_text_detect_spam_post",
        "parameters": [
          {
            "name": "detect_classes",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "spam, not_spam, unknown",
              "title": "Detect Classes"
            }
          },
          {
            "name": "explain",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Explain"
            }
          },
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "*redacted*",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "title": "User Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DictResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/text/clean": {
      "post": {
        "summary": "Text Clean Wrapper",
        "description": "Clean the input text based on the given information.\n\nParameters:\n1. user_input (str): The input sentence to be cleaned.\n    Example:\n    ```\n    <h1>Heading</h1> <p>para</p> visit to this website https://www.google.com for more information\n    ```\n\n2. clean_info (str): The information on how to clean the text.\n    Example: \"remove h1 tags but keep their inner text and remove links and fullstop\"\n\nReturns:\nstr: The cleaned text.",
        "operationId": "text_clean_wrapper_text_clean_post",
        "parameters": [
          {
            "name": "clean_info",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Clean Info"
            }
          },
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "*redacted*",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "title": "User Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/text/normalize": {
      "post": {
        "summary": "Text Normalize Wrapper",
        "description": "Transform user input to either uppercase or lowercase string.\n\nParameters:\n1. user_input (str): The string to be transformed.\n\n2. mode (str): The transformation mode. Valid values are 'uppercase' or 'lowercase'.\nDefault: \"uppercase\"\n\nReturns:\nstr: The transformed string.",
        "operationId": "text_normalize_wrapper_text_normalize_post",
        "parameters": [
          {
            "name": "mode",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/NormalizeMode"
                }
              ],
              "default": "uppercase",
              "title": "Mode"
            }
          },
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "*redacted*",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "title": "User Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/text/spellcheck": {
      "post": {
        "summary": "Text Spellcheck Wrapper",
        "description": "Correct the misspelled words in the input text.\n\nParameters:\n1. user_input (str): The input sentence to perform spell correction on.\n   Example: \"we wlli oderr pzzia adn buregsr at nghti\"\n\nReturns:\nstr: The corrected version of the input sentence with all misspelled words replaced by their correct spellings.",
        "operationId": "text_spellcheck_wrapper_text_spellcheck_post",
        "parameters": [
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "*redacted*",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "title": "User Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/text/srl": {
      "post": {
        "summary": "Text Srl Wrapper",
        "description": "Perform Semantic Role Labeling (SRL) on the input text.\n\nParameters:\n1. user_input (str): The input sentence to perform SRL on.\n    Example: \"John ate an apple.\"\n\nReturns:\ndict: A dictionary containing the detected SRL entities.",
        "operationId": "text_srl_wrapper_text_srl_post",
        "parameters": [
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "*redacted*",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "title": "User Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DictResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/text/cluster": {
      "post": {
        "summary": "Text Cluster Wrapper",
        "description": "Cluster the sentences based on their similarity.\n\nParameters:\n1. user_input (str): The input sentences to be clustered.\n    Example: '''\n    \"sentence 1, sentence 2, sentence 3, ...\"\n\nReturns:\ndict: A dictionary where each key-value pair represents a cluster.\n    The key is the cluster number, and the value is a list containing similar sentences.",
        "operationId": "text_cluster_wrapper_text_cluster_post",
        "parameters": [
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "*redacted*",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "title": "User Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DictResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/text/sentiment": {
      "post": {
        "summary": "Text Sentiment Wrapper",
        "description": "Perform sentiment detection on the input text.\n\nParameters:\n1. user_input (str): The input sentence to perform sentiment detection on.\n    Example: \"Congratulations! You have won a lottery of $1,000,000!\"\n\n2. num_classes (str, optional): The number of categories for sentiment detection.\n    Default: \"positive, negative, neutral\"\n\n3. explanation (bool, optional): Whether to include an explanation in the result.\n    Default: True\n\nReturns:\ndict: A dictionary containing the prediction and explanation (if available).",
        "operationId": "text_sentiment_wrapper_text_sentiment_post",
        "parameters": [
          {
            "name": "num_classes",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "positive, negative, neutral",
              "title": "Num Classes"
            }
          },
          {
            "name": "explanation",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Explanation"
            }
          },
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "*redacted*",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "title": "User Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DictResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/text/topic": {
      "post": {
        "summary": "Text Topic Wrapper",
        "description": "Perform topic detection on the input text.\n\nParameters:\n1. user_input (str): The input sentence to perform topic detection on.\n    Example: \"Congratulations! You have won a lottery of $1,000,000!\"\n\n2. num_classes (str, optional): The number of categories for topic detection.\n    Default: \"story, horror, comedy\"\n\n3. explanation (bool, optional): Whether to include an explanation in the result.\n    Default: True\n\nReturns:\ndict: A dictionary containing the prediction and explanation (if available).",
        "operationId": "text_topic_wrapper_text_topic_post",
        "parameters": [
          {
            "name": "num_classes",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Num Classes"
            }
          },
          {
            "name": "explanation",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Explanation"
            }
          },
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "*redacted*",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "title": "User Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DictResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/text/parts_of_speech": {
      "post": {
        "summary": "Text Parts Of Speech Wrapper",
        "description": "Perform Part-of-Speech (POS) detection on the input text.\n\nParameters:\n1. user_input (str): The input sentence to be analyzed.\n    Example: \"I love Lamborghini, but Bugatti is even better. Although, Mercedes is a class above all.\"\n\n2. pos_tags (str, optional): A comma-separated string specifying the POS tags.\n    Example: \"noun, verb, adjective\"\n    Default: \"More than 50 TAGS already defined\"\n\ndefault_pos_tags = 'noun, verb, adjective, adverb, pronoun, preposition, conjunction, interjection, determiner, cardinal, foreign, number, date, time, ordinal, money, percent, symbol, punctuation, emoticon, hashtag, email, url, mention, phone, ip, cashtag, entity, noun_phrase, verb_phrase, adjective_phrase, adverb_phrase, pronoun_phrase, preposition_phrase, conjunction_phrase, interjection_phrase, determiner_phrase, cardinal_phrase, foreign_phrase, number_phrase, date_phrase, time_phrase, ordinal_phrase, money_phrase, percent_phrase, symbol_phrase, punctuation_phrase, emoticon_phrase, hashtag_phrase, email_phrase, url_phrase, mention_phrase, phone_phrase, ip_phrase, cashtag_phrase, entity_phrase'\n\nReturns:\nlist: A list of tuples containing the detected POS entities.",
        "operationId": "text_parts_of_speech_wrapper_text_parts_of_speech_post",
        "parameters": [
          {
            "name": "pos_tags",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Pos Tags"
            }
          },
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "*redacted*",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "title": "User Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OptionalListResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/text/paraphrase": {
      "post": {
        "summary": "Text Paraphrase Wrapper",
        "description": "Determine if two sentences are paraphrases of each other.\n\nParameters:\n1. user_input (list): A list containing two sentences to be checked for paraphrasing.\n    Example: [\"OpenAI has hosted a hackathon for developers.\", \"The event was a huge success with over 1000 participants.\"]\n\n2. explanation (bool, optional): Whether to include an explanation in the result.\n    Default: True\n\nReturns:\nstr: The prediction of whether the sentences are paraphrases or not.",
        "operationId": "text_paraphrase_wrapper_text_paraphrase_post",
        "parameters": [
          {
            "name": "explanation",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Explanation"
            }
          },
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "*redacted*",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "title": "User Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DictResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/text/segment": {
      "post": {
        "summary": "Text Segment Wrapper",
        "description": "Segment the given text into individual sentences separated by full stops.\n\nParameters:\n1. text_paragraph (str): The input text paragraph(s) to be segmented into sentences.\n    Example: \"The sun gently rose ...\"\n\n2. logical (bool, optional): Whether to logically segment the text into sentences.\n    If True, the prompt code will be used. If False, the text will be split at full stops.\n    Default: True\n\nReturns:\nlist: A Python list of sentences.",
        "operationId": "text_segment_wrapper_text_segment_post",
        "parameters": [
          {
            "name": "logical",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Logical"
            }
          },
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "*redacted*",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "title": "User Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OptionalListResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/text/toxic/{analysis_type}": {
      "post": {
        "summary": "Text Badness Wrapper",
        "description": "Check if the user input contains profanity, biased language, or sarcastic language based on the given analysis type and threshold.\n\nParameters:\n1. user_input (str): The input text to be analyzed.\n\n2. analysis_type (str): The type of analysis to be performed.\n    Values (str): \"profanity\", \"bias\", \"sarcasm\"\n\n3. threshold (str, optional): The threshold level for blocking the respective language.\n    Values (str): \"BLOCK_NONE\", \"BLOCK_ONLY_HIGH\", \"BLOCK_MEDIUM_AND_ABOVE\", \"BLOCK_LOW_AND_ABOVE\"\n    Default: \"BLOCK_NONE\"\n\nReturns:\nbool: True if the user input contains the respective language, False otherwise.",
        "operationId": "text_badness_wrapper_text_toxic__analysis_type__post",
        "parameters": [
          {
            "name": "analysis_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ToxicInputType"
            }
          },
          {
            "name": "threshold",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ThresholdType"
                }
              ],
              "default": "BLOCK_NONE",
              "title": "Threshold"
            }
          },
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "*redacted*",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "title": "User Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoolResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/text/replace_emojis": {
      "post": {
        "summary": "Text Emojis Wrapper",
        "description": "Replace emojis with their meaning and full form in the given user input.\n\nParameters:\n1. user_input (str): The input user input containing emojis.\n\nReturns:\nstr: The user input with emojis replaced by their meaning and full form.",
        "operationId": "text_emojis_wrapper_text_replace_emojis_post",
        "parameters": [
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "*redacted*",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "title": "User Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/text/tfidf": {
      "post": {
        "summary": "Text Tfidf Wrapper",
        "description": "Calculate the TF-IDF matrix or unique n-grams for a given list of documents and n-gram size.\n\nParameters:\n1. documents (list): A list of documents.\n\n2. ngrams_size (int): The size of n-grams.\n\n3. output_type (str): The type of output to be generated. Values can be \"tfidf\", \"ngrams\", or \"all\".\n\nReturns:\ntuple: A tuple containing the TF-IDF matrix, the set of unique n-grams, or both based on the output_type.",
        "operationId": "text_tfidf_wrapper_text_tfidf_post",
        "parameters": [
          {
            "name": "ngram_size",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Ngram Size"
            }
          },
          {
            "name": "output_type",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TFIDFOutputType"
            }
          },
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "*redacted*",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "title": "Documents"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TupleResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/text/idioms": {
      "post": {
        "summary": "Text Idioms Wrapper",
        "description": "Identify and extract any idioms present in the given sentence.\n\nParameters:\n1. user_input (str): The input sentence.\n\nReturns:\nlist: A list of extracted idioms. If no idiom is found, returns None.",
        "operationId": "text_idioms_wrapper_text_idioms_post",
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "title": "User Input"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OptionalListResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/text/sense_disambiguation": {
      "post": {
        "summary": "Text Sense Disambiguation Wrapper",
        "description": "Perform word sense disambiguation for a given input sentence and word to disambiguate.\n\nParameters:\n1. user_input (str): The input sentence.\n\n2. word_to_disambiguate (str): The word to disambiguate.\n\nReturns:\nlist: A list of meanings and their explanations based on the context in the input sentence.\nIf the word does not appear in the input sentence, returns None.",
        "operationId": "text_sense_disambiguation_wrapper_text_sense_disambiguation_post",
        "parameters": [
          {
            "name": "word_to_disambiguate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Word To Disambiguate"
            }
          },
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "*redacted*",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "title": "User Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OptionalListResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/text/frequency": {
      "post": {
        "summary": "Text Frequency Wrapper",
        "description": "Calculate the frequency of specific words or all words in the given user input.\n\nParameters:\n1. user_input (str): The input user input.\n\n2. words (list, optional): The list of words to calculate the frequency for.\nIf None is provided, the function will calculate the frequency for all words.\nDefault: None\n\nReturns:\ndict: A dictionary where the key is the word and the value is its frequency.",
        "operationId": "text_frequency_wrapper_text_frequency_post",
        "parameters": [
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "*redacted*",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_text_frequency_wrapper_text_frequency_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DictResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/text/anomaly": {
      "post": {
        "summary": "Text Anomaly Wrapper",
        "description": "Detect any anomalies or outliers in the given input text.\n\nParameters:\n1. user_input (str): The input text to be analyzed.\n\nReturns:\nlist: A list of detected anomalies with explanations of how they are anomalous.\nIf no anomalies are found, returns None.",
        "operationId": "text_anomaly_wrapper_text_anomaly_post",
        "parameters": [
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "*redacted*",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "title": "User Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OptionalListResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/text/core_reference": {
      "post": {
        "summary": "Text Core Reference Wrapper",
        "description": "Perform coreference resolution on the given text to identify who (pronoun) refers to what/whom.\n\nParameters:\n1. user_input (str): The input text to perform coreference resolution on.\n\nReturns:\nlist: A list of resolved coreferences in the format \"Pronoun refers to Entity\".\nIf no pronouns are found or if the resolved references cannot be determined, returns None.",
        "operationId": "text_core_reference_wrapper_text_core_reference_post",
        "parameters": [
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "*redacted*",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "title": "User Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OptionalListResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Body_text_frequency_wrapper_text_frequency_post": {
        "properties": {
          "words": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Words"
          },
          "user_input": {
            "type": "string",
            "title": "User Input"
          }
        },
        "type": "object",
        "required": [
          "user_input"
        ],
        "title": "Body_text_frequency_wrapper_text_frequency_post"
      },
      "BoolResult": {
        "properties": {
          "results": {
            "type": "boolean",
            "title": "Results",
            "default": false
          }
        },
        "type": "object",
        "title": "BoolResult"
      },
      "DictResult": {
        "properties": {
          "results": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Results"
          }
        },
        "type": "object",
        "required": [
          "results"
        ],
        "title": "DictResult"
      },
      "EmbedTaskType": {
        "type": "string",
        "enum": [
          "RETRIEVAL_QUERY",
          "RETRIEVAL_DOCUMENT",
          "SEMANTIC_SIMILARITY",
          "CLASSIFICATION",
          "CLUSTERING"
        ],
        "title": "EmbedTaskType"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "LemStemOp": {
        "type": "string",
        "enum": [
          "stemming",
          "lemmatization"
        ],
        "title": "LemStemOp"
      },
      "NormalizeMode": {
        "type": "string",
        "enum": [
          "uppercase",
          "lowercase"
        ],
        "title": "NormalizeMode"
      },
      "OptionalListResult": {
        "properties": {
          "results": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Results"
          }
        },
        "type": "object",
        "required": [
          "results"
        ],
        "title": "OptionalListResult"
      },
      "StrListResult": {
        "properties": {
          "results": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Results"
          }
        },
        "type": "object",
        "required": [
          "results"
        ],
        "title": "StrListResult"
      },
      "TFIDFOutputType": {
        "type": "string",
        "enum": [
          "tfidf",
          "ngrams",
          "all"
        ],
        "title": "TFIDFOutputType"
      },
      "TextResult": {
        "properties": {
          "results": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Results"
          }
        },
        "type": "object",
        "required": [
          "results"
        ],
        "title": "TextResult"
      },
      "ThresholdType": {
        "type": "string",
        "enum": [
          "BLOCK_NONE",
          "BLOCK_ONLY_HIGH",
          "BLOCK_MEDIUM_AND_ABOVE",
          "BLOCK_LOW_AND_ABOVE"
        ],
        "title": "ThresholdType"
      },
      "ToxicInputType": {
        "type": "string",
        "enum": [
          "profanity",
          "bias",
          "sarcasm"
        ],
        "title": "ToxicInputType"
      },
      "TupleListResult": {
        "properties": {
          "results": {
            "items": {
              "prefixItems": [
                {
                  "type": "string"
                },
                {
                  "type": "string"
                }
              ],
              "type": "array",
              "maxItems": 2,
              "minItems": 2
            },
            "type": "array",
            "title": "Results"
          }
        },
        "type": "object",
        "required": [
          "results"
        ],
        "title": "TupleListResult"
      },
      "TupleResult": {
        "properties": {
          "results": {
            "items": {},
            "type": "array",
            "title": "Results"
          }
        },
        "type": "object",
        "required": [
          "results"
        ],
        "title": "TupleResult"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  }
}